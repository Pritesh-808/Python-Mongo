
typecasting in cpp , static cast and all that 
copy constructor using integer pointer 
difference in poly and abstraction
quick sort 
pointer 


















------ pointers and references ------------------------------

code :::::::::
#include <iostream>
using namespace std;
int main()
{
    int *p;
    int b = 20;
    p = &b;
    
    int **r;
    r =&p;
    cout<<"p:"<<endl;
    cout<<*p<<endl;
    cout<<p<<endl;
    cout<<&p<<endl;
    
    cout<<"b:"<<endl;
   // cout<<*b<<endl;
    cout<<b<<endl;
    cout<<&b<<endl;
    
    cout<<"r:"<<endl;
    cout<<r<<endl;
    cout<<*r<<endl;
    cout<<&r<<endl;
    
    

    return 0;
}


output:::::::::
p:
20
0x7ffd1d96d504
0x7ffd1d96d508
b:
20
0x7ffd1d96d504
r:
0x7ffd1d96d508
0x7ffd1d96d504
0x7ffd1d96d510

------------------------------------------- virtual function ----- method overriding in cpp----------------

#include <iostream>
using namespace std;


class Base {
    public:
    virtual void add(){
     cout<<"honey"<<endl;
    }
};
class Derived:public Base {
    public:
     void display(){
        cout<<"Derived Added"<<endl;
     }
};
int main()
{
    // Base *b = new Base();
    //Base *b1 = new Derived();
    Derived d;
    // b->add();
    // b1->add();
    
    

    return 0;
}



--------------------------------------object slicing --------------------------

----------------------factory class cpp-------------------------------------------

// Abstract product class
#include <iostream>
class Shape {
public:
    virtual void draw() = 0;
    virtual ~Shape() {
    } // Virtual destructor for polymorphism
};
// Concrete product class - Circle
class Circle : public Shape {
public:
    void draw() override
    {
        std::cout<<"Drawing a Circle"<<std::endl;
    }
};
class Rectangle : public Shape{
    public:
    void draw() override{
        std::cout<<"drawing a rectangle"<<std::endl;
    }
}

// Concrete product class - Square
class Square : public Shape {
public:
    void draw() override
    {
        std::cout<<"Drawing a Square"<<std::endl;
    }
};
// Abstract creator class
class ShapeFactory {
public:
    virtual Shape* createShape() = 0;
    virtual ~ShapeFactory() {
    } // Virtual destructor for polymorphism
};
// Concrete creator class - CircleFactory
class CircleFactory : public ShapeFactory {
public:
    Shape* createShape() override { return new Circle(); }
};

// Concrete creator class - SquareFactory
class SquareFactory : public ShapeFactory {
public:
    Shape* createShape() override { return new Square(); }
};
int main()
{
    ShapeFactory* circleFactory = new CircleFactory();
    ShapeFactory* squareFactory = new SquareFactory();

    Shape* circle = circleFactory->createShape();
    Shape* square = squareFactory->createShape();

    circle->draw(); // Output: Drawing a Circle
    square->draw(); // Output: Drawing a Square

    delete circleFactory;
    delete squareFactory;
    delete circle;
    delete square;
  
      // Client code based on user-input
  
      /* cout << "Enter shape type (circle or square): ";
    string shapeType;
    cin >> shapeType;

    ShapeFactory* shapeFactory = nullptr;
    if (shapeType == "circle") {
        shapeFactory = new CircleFactory();
    } else if (shapeType == "square") {
        shapeFactory = new SquareFactory();
    } else {
        cout << "Invalid shape type entered." << endl;
        return 1;
    }

    Shape* shape = shapeFactory->createShape();
    shape->draw();

    delete shapeFactory;
    delete shape; */

    return 0;
}





------------------------------merge sort ----------------------------------------

#include <iostream>
#include <vector>
using namespace std;
void merge(int arr[], int low, int high)
{
    int mid = low + (high - low) / 2;
    int size1 = mid - low + 1;
    int size2 = high - mid;
 
    std::vector<int> vec1(size1);
    std::vector<int> vec2(size2);
 
    for (int i = 0; i < size1; ++i)
    {
        vec1[i] = arr[low + i];
    }
    for (int j = 0; j < size2; ++j)
    {
        vec2[j] = arr[mid + 1 + j];
    }
 
    int i = 0, j = 0, k = 0;
    while (i < size1 && j < size2)
    {
        if (vec1[i] <= vec2[j])
        {
            arr[k] = vec1[i];
            i++;
        }
        else
        {
            arr[k] = vec2[j];
            j++;
        }
        k++;
    }
 
    while (i < size1)
    {
        arr[k] = vec1[i];
        i++;
        k++;
    }
    while (j < size2)
    {
        arr[k] = vec2[j];
        j++;
        k++;
    }
}
 
 
void mergeSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int mid = low + (high - low) / 2;
 
        mergeSort(arr, low, mid);
 
        mergeSort(arr, mid + 1, high);
 
        merge(arr, low,  high);
    }
}

int main()
{
    int arr[]= {1,14,12,16,16,12,1,17};
    mergeSort(arr,0,(sizeof(arr)/sizeof(int))+1);
    cout<<arr[2]<<endl;
    
    
}

--------------------------------------------- pointers ----------------------------------------













---------------------------------- smart pointers --------------------------------------------------