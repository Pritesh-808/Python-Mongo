//design patterns , smart pointers , malloc n stuff 
// virtual table vTable , vptr on c++ : https://www.geeksforgeeks.org/vtable-and-vptr-in-cpp/
//




---------------------------------------------------------------------


#include <iostream>
#include <cstring>
using namespace std;
class _cpy_constructor{
   char *s;
   int size;
   //char *s=NULL
   public:
   _cpy_constructor(const char* s = NULL);
    void display(){
     cout<<s<<endl;
    }
    ~_cpy_constructor() { 
      cout<<"destructor "<<endl;
      //delete s;
      }
      _cpy_constructor(const _cpy_constructor &);
      void change(const char* s){
        strcpy(this->s,s);
      }
  
   
};
_cpy_constructor::_cpy_constructor(const char *str){
     size= strlen(str);
     s = new char[size+1];
     strcpy(s,str);
   }
_cpy_constructor::_cpy_constructor(const _cpy_constructor &cpy_object){
  size = cpy_object.size;
  this->s = new char[size+1];
  strcpy(this->s,cpy_object.s);
}
  
int main(){
  _cpy_constructor c1("to be copied");
  _cpy_constructor c2 =c1;
  c1.display();
  c2.display();
  
  c1.change("change of string");
  c1.display();
  c2.display();
  
  
//--------------------output with user defined copy constructor - : -----------
// to be copied
// to be copied
// change of string
// to be copied
// destructor 
// destructor 

//--------------------output with user defined copy constructor - : -----------
// to be copied
// to be copied
// change of string
// change of string
// destructor 
// destructor 
// free(): double free detected in tcache 2

//Reason for difference in output with and without user defined copy constructor : deep copy and shallow copy 

}

---------------------------------------------------------------------------------------------------------

pointers :
1)wild pointer: pointer which is not initialised to anything
2)NULL Pointer : It is a pointer which is pointing to nothing. In case, if we donâ€™t have address to be assigned to a pointer, then we can simply use NULL. 

->smart pointers in c++:


-------------------------------------------------------------------------------------------------

modes of inheritence :
public : public->public , protected ->protected
protected : public ->protected , protected ->protected
private ->public ->private , protected ->private

---------------------------------------------------------------------------------------------------------
multithreading in cpp---

quicky :
join , detach , mutex - race condition , critical section , lock and unlock , ]

=====thread_obj.join(); // block the current thread till thread_obj has finished its execution
=====thread_obj.detach()//
---------------code for explanation of join and detach 

#include <iostream>
#include <thread>
using namespace std;
bool working  = true;
void doWork(){
   while(working){
     cout<<"working - - -"<<endl;
     
   }
}

int main()
{
    cout<<"Hello World";
    thread t1(doWork); // thread called , printing of working - - - started 
    cin.get(); // waits for enter key press to stop printing
    t1.detach(); // thread detached but execution still occurring because  after this line of code execution of main finishes 
    //working = false; //try with t1.join(); 
    std::this_thread::sleep_for(2s); // printing of working - - -  continues for 5 s 
   
    

    return 0;
}
--------------------------------------------------------------------------------------------

mutex - mutual exclusion (in hindi - samjhauta) in cpp

====race condition & critical section -
1)race condition is a situation where two or more threads cause the change of a common data at the same time 
2)if there is a race condition then we have to protech it and the protected section is called critical section.

==== MUTEX :
1) Mutex is used to avoid race condition 
2) we use lock() , unlock() to avoid race condition.

--------------------code-------------------------------

#include <iostream>
#include <mutex>
#include <thread>
using namespace std;

int amount = 0;
std::mutex m;

void increment(){
    m.lock();
    amount++;
    m.unlock();
    //here either t1 or t2 will access the function first , even if we say the execution of threads in parallel , but still , one thread will be 
    //ahead in terms of few nanoseconds , so lets say t1 access thread first , then it will lock the critical section i.e.amount++ , 
    // until then t2 will wait for t1 to unlock and after that t2 will be able to increment the amount
}
int main()
{
   thread t1(increment);
   thread t2(increment);
   
   t1.join();
   t2.join();
   
   cout<<amount<<endl;
   return 0;
} // output 2.
------------------------------------------------------------------------------------------------------------------------
--------MUTEX try_lock() in cpp------------
